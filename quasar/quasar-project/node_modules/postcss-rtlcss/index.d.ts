import { Plugin } from 'postcss';

declare enum Mode {
    combined = "combined",
    override = "override"
}
declare enum Source {
    ltr = "ltr",
    rtl = "rtl"
}
declare enum Autorename {
    disabled = "disabled",
    flexible = "flexible",
    strict = "strict"
}
declare type ModeValues = keyof typeof Mode;
declare type SourceValues = keyof typeof Source;
declare type AutorenameValues = keyof typeof Autorename;
declare type strings = string | string[];
interface PluginStringMap {
    name?: string;
    search: strings;
    replace: strings;
}
interface PluginOptions {
    mode?: ModeValues;
    ltrPrefix?: strings;
    rtlPrefix?: strings;
    bothPrefix?: strings;
    safeBothPrefix?: boolean;
    ignorePrefixedRules?: boolean;
    source?: SourceValues;
    processUrls?: boolean;
    processKeyFrames?: boolean;
    processEnv?: boolean;
    useCalc?: boolean;
    stringMap?: PluginStringMap[];
    autoRename?: AutorenameValues;
    greedy?: boolean;
    aliases?: Record<string, string>;
}

declare function postcssRTLCSS(options?: PluginOptions): Plugin;

export = postcssRTLCSS
